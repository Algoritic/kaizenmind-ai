from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Dict, Optional, List
from pathlib import Path

from static_analysis import run_static_pentest
from dynamic_analysis import run_dynamic_pentest
from schemas import LlmConfig # Import LlmConfig

app = FastAPI()

class StaticPentestRequest(BaseModel):
    lang: str
    cwd: str
    llm_config: Optional[LlmConfig] = None # For consistency, even if not directly used

class DynamicPentestRequest(BaseModel):
    tool: str
    args: List[str]

@app.post("/static_pentest")
async def static_pentest(request: StaticPentestRequest):
    try:
        results = run_static_pentest(request.lang, Path(request.cwd), request.llm_config)
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/dynamic_pentest")
async def dynamic_pentest(request: DynamicPentestRequest):
    try:
        results = run_dynamic_pentest(request.tool, request.args)
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
