# pentestai/config.py
from __future__ import annotations
import os, logging
from dataclasses import dataclass
from logging.handlers import RotatingFileHandler

# ---- Runtime config that reads ENV at call-time (not import-time) ----
@dataclass
class LLMConfig:
    backend: str
    ollama_url: str
    ollama_model: str
    openai_api_base: str | None
    openai_api_key: str | None

@dataclass
class LoggingConfig:
    level: str
    file: str | None

@dataclass
class RuntimeConfig:
    llm: LLMConfig
    logging: LoggingConfig
    artifacts_workdir: str
    timeout_seconds: int
    use_langgraph: bool

def load_runtime_config(
    *,
    # CLI overrides (pass None to use ENV/default)
    log_file: str | None = None,
    log_level: str | None = None,
) -> RuntimeConfig:
    # read ENV at **runtime**
    env = os.environ

    # logging
    level = (log_level or env.get("PENTESTAI_LOG_LEVEL", "INFO")).upper()
    file_  = log_file if (log_file is not None) else (env.get("PENTESTAI_LOG_FILE") or None)

    # llm
    llm_backend    = env.get("LLM_BACKEND", "ollama")
    ollama_url     = env.get("OLLAMA_URL", "http://localhost:11434")
    ollama_model   = env.get("OLLAMA_MODEL", "gpt-oss:20b")
    openai_base    = env.get("OPENAI_API_BASE")
    openai_key     = env.get("OPENAI_API_KEY")

    # misc
    workdir        = env.get("PENTESTAI_WORKDIR", "artifacts")
    timeout        = int(env.get("PENTESTAI_TIMEOUT", "900"))
    use_langgraph  = env.get("USE_LANGGRAPH", "1").lower() not in ("0", "false", "no")

    return RuntimeConfig(
        llm = LLMConfig(
            backend=llm_backend, ollama_url=ollama_url, ollama_model=ollama_model,
            openai_api_base=openai_base, openai_api_key=openai_key
        ),
        logging = LoggingConfig(level=level, file=file_),
        artifacts_workdir = workdir,
        timeout_seconds = timeout,
        use_langgraph = use_langgraph,
    )

# ---- Logging set-up (defensive, directory-safe, with visibility) ----
def setup_logging(cfg: LoggingConfig) -> None:
    root = logging.getLogger()
    root.setLevel(getattr(logging, cfg.level, logging.INFO))

    # Always have console
    if not any(isinstance(h, logging.StreamHandler) for h in root.handlers):
        sh = logging.StreamHandler()
        sh.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
        sh.setLevel(getattr(logging, cfg.level, logging.INFO))
        root.addHandler(sh)

    if cfg.file:
        try:
            path = os.path.expanduser(cfg.file)
            if os.path.isdir(path):
                path = os.path.join(path, "pentestai.log")  # handle bind-mount dir case
            parent = os.path.dirname(path)
            if parent and not os.path.exists(parent):
                os.makedirs(parent, exist_ok=True)

            fh = RotatingFileHandler(path, maxBytes=10*1024*1024, backupCount=3, encoding="utf-8")
            fh.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
            fh.setLevel(getattr(logging, cfg.level, logging.INFO))

            # avoid duplicate same-file handlers
            for h in list(root.handlers):
                if isinstance(h, RotatingFileHandler) and getattr(h, "baseFilename", None) == getattr(fh, "baseFilename", None):
                    root.removeHandler(h)

            root.addHandler(fh)
            logging.getLogger(__name__).info("File logging enabled at %s (level=%s)", path, cfg.level)
        except Exception as e:
            logging.getLogger(__name__).warning("Failed to enable file logging at %r: %s", cfg.file, e)
    else:
        logging.getLogger(__name__).info("No PENTESTAI_LOG_FILE provided; logging to console only (level=%s).", cfg.level)
