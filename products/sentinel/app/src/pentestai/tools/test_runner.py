import logging
from .subproc import run, which

logger = logging.getLogger(__name__)

def pytest_run(repo_path: str) -> dict:
    logger.info(f"Running pytest in {repo_path}")
    if which("pytest") is None:
        logger.warning("Pytest not found in PATH.")
        return {"tool": "pytest", "error": "not found"}
    c, o, e = run("pytest -q --maxfail=1 --disable-warnings", cwd=repo_path, timeout=1800)
    if c != 0:
        logger.error(f"Pytest failed in {repo_path} with code {c}. Stderr: {e}")
    else:
        logger.info(f"Pytest completed successfully in {repo_path}.")
    return {"tool": "pytest", "code": c, "stdout": o, "stderr": e}

def gradle_test(repo_path: str) -> dict:
    logger.info(f"Running Gradle tests in {repo_path}")
    gradle_found = which("gradle")
    gradlew_found = which("./gradlew")
    if not gradle_found and not gradlew_found:
        logger.warning("Gradle or gradlew not found in PATH.")
        return {"tool": "gradle", "error": "not found"}
    
    cmd = "./gradlew test" if gradlew_found else "gradle test"
    c, o, e = run(cmd, cwd=repo_path, timeout=3600)
    if c != 0:
        logger.error(f"Gradle tests failed in {repo_path} with code {c}. Stderr: {e}")
    else:
        logger.info(f"Gradle tests completed successfully in {repo_path}.")
    return {"tool": "gradle_test", "code": c, "stdout": o, "stderr": e}

def mvn_test(repo_path: str) -> dict:
    logger.info(f"Running Maven tests in {repo_path}")
    if which("mvn") is None:
        logger.warning("Maven not found in PATH.")
        return {"tool": "maven", "error": "not found"}
    c, o, e = run("mvn -q -DskipTests=false test", cwd=repo_path, timeout=3600)
    if c != 0:
        logger.error(f"Maven tests failed in {repo_path} with code {c}. Stderr: {e}")
    else:
        logger.info(f"Maven tests completed successfully in {repo_path}.")
    return {"tool": "maven_test", "code": c, "stdout": o, "stderr": e}