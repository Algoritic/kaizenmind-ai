import json
import logging
from .subproc import run, which

logger = logging.getLogger(__name__)

def bandit(repo_path: str) -> dict:
    logger.info(f"Running bandit on {repo_path}")
    if which("bandit") is None:
        logger.warning("Bandit not found in PATH.")
        return {"tool": "bandit", "error": "not found"}
    c, o, e = run(f"bandit -r -f json {repo_path}")
    try:
        data = json.loads(o) if o else {}
        logger.debug(f"Bandit output parsed successfully for {repo_path}")
    except json.JSONDecodeError:
        logger.error(f"Error parsing bandit JSON output for {repo_path}. Stderr: {(e or '')[:2000]}")
        data = {"parse_error": True, "raw": (o or "")[:2000], "stderr": (e or "")[:2000]}
    except Exception as ex:
        logger.error(f"An unexpected error occurred during bandit execution for {repo_path}: {ex}")
        data = {"parse_error": True, "raw": (o or "")[:2000], "stderr": (e or "")[:2000]}
    return {"tool": "bandit", "code": c, "data": data, "stderr": (e or "")[:2000]}

def semgrep(repo_path: str) -> dict:
    logger.info(f"Running semgrep on {repo_path}")
    if which("semgrep") is None:
        logger.warning("Semgrep not found in PATH.")
        return {"tool": "semgrep", "error": "not found"}
    c, o, e = run(f"semgrep --config=p/ci --json {repo_path}")
    try:
        data = json.loads(o) if o else {}
        logger.debug(f"Semgrep output parsed successfully for {repo_path}")
    except json.JSONDecodeError:
        logger.error(f"Error parsing semgrep JSON output for {repo_path}. Stderr: {(e or '')[:2000]}")
        data = {"parse_error": True, "raw": (o or "")[:2000], "stderr": (e or "")[:2000]}
    except Exception as ex:
        logger.error(f"An unexpected error occurred during semgrep execution for {repo_path}: {ex}")
        data = {"parse_error": True, "raw": (o or "")[:2000], "stderr": (e or "")[:2000]}
    return {"tool": "semgrep", "code": c, "data": data, "stderr": (e or "")[:2000]}

def eslint(repo_path: str) -> dict:
    logger.info(f"Running eslint on {repo_path}")
    if which("eslint") is None:
        logger.warning("ESLint not found in PATH.")
        return {"tool": "eslint", "error": "not found"}
    c, o, e = run("eslint -f json .", cwd=repo_path)
    try:
        data = json.loads(o) if o else []
        logger.debug(f"ESLint output parsed successfully for {repo_path}")
    except json.JSONDecodeError:
        logger.error(f"Error parsing eslint JSON output for {repo_path}. Stderr: {(e or '')[:2000]}")
        data = {"parse_error": True, "raw": (o or "")[:2000], "stderr": (e or "")[:2000]}
    except Exception as ex:
        logger.error(f"An unexpected error occurred during eslint execution for {repo_path}: {ex}")
        data = {"parse_error": True, "raw": (o or "")[:2000], "stderr": (e or "")[:2000]}
    return {"tool": "eslint", "code": c, "data": data, "stderr": (e or "")[:2000]}

def run_all(repo_path: str) -> dict:
    logger.info(f"Running all static analyzers on {repo_path}")
    out = {}
    for fn in (bandit, semgrep, eslint):
        try:
            out[fn.__name__] = fn(repo_path)
        except Exception as e:
            logger.error(f"Error running static analyzer {fn.__name__} on {repo_path}: {e}")
            out[fn.__name__] = {"error": str(e)}
    logger.info(f"Finished running all static analyzers on {repo_path}")
    return out