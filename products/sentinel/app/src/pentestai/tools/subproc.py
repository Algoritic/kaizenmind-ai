import subprocess
import shlex
import os
import logging
from typing import Tuple

logger = logging.getLogger(__name__)

def run(cmd: str, timeout: int = 900, cwd: str | None = None) -> Tuple[int, str, str]:
    logger.debug(f"Executing command: {cmd} in directory: {cwd or os.getcwd()}")
    proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, text=True)
    try:
        out, err = proc.communicate(timeout=timeout)
        logger.debug(f"Command finished with return code: {proc.returncode}")
    except subprocess.TimeoutExpired:
        proc.kill()
        logger.warning(f"Command timed out after {timeout}s: {cmd}")
        return 124, "", f"Timeout after {timeout}s"
    except Exception as e:
        logger.error(f"An unexpected error occurred while running command {cmd}: {e}")
        return 1, "", str(e)
    return proc.returncode, out, err

def which(bin_name: str) -> str | None:
    for p in os.environ.get("PATH", "").split(os.pathsep):
        cand = os.path.join(p, bin_name)
        if os.path.isfile(cand) and os.access(cand, os.X_OK):
            logger.debug(f"Found {bin_name} at {cand}")
            return cand
    logger.warning(f"Binary {bin_name} not found in PATH.")
    return None