from typing import Optional, List
from pentestai.models.persona_results import Finding
import os

def _mk(t, d, s, rec=None):
    return Finding(title=t, description=d, severity=s, recommendation=rec)

class PentestToolkit:
    @staticmethod
    def run_baseline_dynamic_scan(
        repo_path: Optional[str] = None,
        apk_path: Optional[str] = None,
        api_deep: bool = False,
        apk_deep: bool = False,
    ) -> List[Finding]:
        if apk_path and os.path.exists(apk_path):
            return [_mk("APK deep pentest" if apk_deep else "APK dynamic baseline",
                        "APK dynamic stub",
                        "high" if apk_deep else "medium",
                        rec="Use MobSF + dynamic instrumentation")]
        if repo_path and os.path.exists(repo_path):
            return [_mk("API deep fuzzing" if api_deep else "API baseline fuzzing",
                        "API dynamic stub",
                        "high" if api_deep else "medium",
                        rec="Use auth-aware API fuzzer")]
        return [_mk("No target", "No repo or apk provided", "low")]
