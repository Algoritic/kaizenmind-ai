
from __future__ import annotations
from typing import List, Optional, Literal, Dict, Any
from pydantic import BaseModel, Field

Severity = Literal["critical","high","medium","low"]
SEVERITY_ORDER: Dict[Severity,int] = {"critical":0,"high":1,"medium":2,"low":3}

class Finding(BaseModel):
    title: str
    description: Optional[str] = None
    severity: Severity
    file: Optional[str] = None
    line: Optional[int] = None
    cwe: Optional[str] = None
    cvss: Optional[float] = None
    recommendation: Optional[str] = None
    evidence: Optional[str] = None
    tags: Optional[List[str]] = None

class BasePersonaResult(BaseModel):
    persona: str
    summary: str
    findings: List[Finding] = []
    artifacts: Optional[List[str]] = None
    meta: Optional[Dict[str,Any]] = None

class CodeReviewResult(BasePersonaResult):
    persona: Literal["Code Reviewer"]
    metrics: Optional[Dict[str,Any]] = None

class TestEngineerResult(BasePersonaResult):
    persona: Literal["Test Engineer"]
    coverage: Optional[float] = None
    failed_tests: Optional[List[str]] = None

class SecurityAnalystResult(BasePersonaResult):
    persona: Literal["Security Analyst"]
    vulnerabilities: Optional[List[Dict[str,Any]]] = None

class PentesterResult(BasePersonaResult):
    persona: Literal["PenTester"]
    exploits: Optional[List[str]] = None
    impact_summary: Optional[str] = None

def severity_sort_key(f: Finding) -> int:
    return SEVERITY_ORDER.get(f.severity,99)
